////////////////////////////////////////////////////////////////////////
//
// ***** THIS GROOVY SCRIPT HAS BEEN DEPRECATED. PLEASE USE
// DrugInteractionPrediction for DDI EXPERIMENTS *****
//
// *****TODO: Delete script after all experiments are complete!*****
//
////////////////////////////////////////////////////////////////////////

package edu.ucsc.cs;

import edu.umd.cs.psl.application.inference.MPEInference
import edu.umd.cs.psl.application.learning.weight.maxlikelihood.MaxLikelihoodMPE
import edu.umd.cs.psl.config.*
import edu.umd.cs.psl.core.*
import edu.umd.cs.psl.core.inference.*
import edu.umd.cs.psl.database.DataStore
import edu.umd.cs.psl.database.Database
import edu.umd.cs.psl.database.DatabasePopulator
import edu.umd.cs.psl.database.Partition
import edu.umd.cs.psl.database.rdbms.RDBMSDataStore
import edu.umd.cs.psl.database.rdbms.driver.H2DatabaseDriver
import edu.umd.cs.psl.database.rdbms.driver.H2DatabaseDriver.Type
import edu.umd.cs.psl.evaluation.result.*
import edu.umd.cs.psl.evaluation.statistics.RankingScore
import edu.umd.cs.psl.evaluation.statistics.SimpleRankingComparator
import edu.umd.cs.psl.groovy.*
import edu.umd.cs.psl.model.argument.ArgumentType
import edu.umd.cs.psl.model.argument.GroundTerm
import edu.umd.cs.psl.model.argument.Variable
import edu.umd.cs.psl.model.atom.QueryAtom
import edu.umd.cs.psl.model.parameters.PositiveWeight
import edu.umd.cs.psl.model.predicate.Predicate
import edu.umd.cs.psl.ui.loading.*
import edu.umd.cs.psl.util.database.*


String experiment_name = args[1];
int folds = Integer.parseInt(args[2]);
String interaction_type = args[3];
int blockingK = Integer.parseInt(args[4]);
String blocking_type = args[5];
int numDrugs = 300;

boolean isBinarized = false;


// Setting the data path
// Change these to change the blocking parameter K
def base_dir = 'data'+java.io.File.separator;
def interactions_dir = base_dir + experiment_name + java.io.File.separator + interaction_type + java.io.File.separator;
def similarities_dir = blocking_type + '_' + String.valueOf(blockingK) + java.io.File.separator;


//Setting up datastore

ConfigManager cm = ConfigManager.getManager();
ConfigBundle dtBundle = cm.getBundle("fakhraei_sridhar_bioinformatics");

String dbpath = "./testdb_fsbio";
DataStore data = new RDBMSDataStore(new H2DatabaseDriver(Type.Disk, dbpath, false), dtBundle);

// Only defining predicates for loading
// ======================

PSLModel m = new PSLModel(this,data)

m.add predicate : "ATCSimilarity" , types:[ArgumentType.UniqueID, ArgumentType.UniqueID]
m.add predicate : "SideEffectSimilarity" , types:[ArgumentType.UniqueID, ArgumentType.UniqueID]
m.add predicate : "GOSimilarity" , types:[ArgumentType.UniqueID, ArgumentType.UniqueID]
m.add predicate : "ligandSimilarity" , types:[ArgumentType.UniqueID, ArgumentType.UniqueID]
m.add predicate : "chemicalSimilarity" , types:[ArgumentType.UniqueID, ArgumentType.UniqueID]
m.add predicate : "seqSimilarity" , types:[ArgumentType.UniqueID, ArgumentType.UniqueID]
m.add predicate : "distSimilarity" , types:[ArgumentType.UniqueID, ArgumentType.UniqueID]

/* Loading all the data into partitions */



for (int k=0;k<folds;k++)
{
	System.out.println("\n-------------------");
	TimeNow = new Date();
	System.out.println("Fold "+(k+1).toString()+" Start: "+TimeNow);

	data.deletePartition( new Partition(673+(k*10)) );
	data.deletePartition( new Partition(674+(k*10)) );

	// Creating the partition to read the data
	Partition cv_similarities =  new Partition(673+(k*10));
	Partition wl_similarities = new Partition(674+(k*10));

	current_sim_dir = interactions_dir + (k+1).toString() + java.io.File.separator + similarities_dir;

	// Reading triad target similarities from file
	for (Predicate p : [ATCSimilarity, distSimilarity, seqSimilarity, ligandSimilarity, GOSimilarity, SideEffectSimilarity, chemicalSimilarity])
	{
		System.out.println "Reading " + p.getName();
		cv_insert = data.getInserter(p, cv_similarities)
		wl_insert = data.getInserter(p, wl_similarities)

		if (isBinarized){
			InserterUtils.loadDelimitedData(cv_insert, current_sim_dir+p.getName().toLowerCase()+"_cv.csv")
			InserterUtils.loadDelimitedData(wl_insert, current_sim_dir+p.getName().toLowerCase()+"_wl.csv")
		}else{
			InserterUtils.loadDelimitedDataTruth(cv_insert, current_sim_dir+p.getName().toLowerCase()+"_cv.csv")
			InserterUtils.loadDelimitedDataTruth(wl_insert, current_sim_dir+p.getName().toLowerCase()+"_wl.csv")
		}
	}
}






